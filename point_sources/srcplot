#!/usr/bin/env python
import numpy as np, argparse, time, sys
from enlib import enmap, colorize, utils
from PIL import Image
parser = argparse.ArgumentParser()
parser.add_argument("ifile")
parser.add_argument("srcs")
parser.add_argument("odir")
parser.add_argument("-c", "--color", default="wmap")
parser.add_argument("-r", "--range", type=str)
parser.add_argument("-R", "--radius", type=int, default=16)
parser.add_argument("--min", type=str)
parser.add_argument("--max", type=str)
parser.add_argument("-q", "--quantile", type=float, default=0.01)
parser.add_argument("-A", "--amprel", action="store_true")
parser.add_argument("-v", dest="verbosity", action="count")
parser.add_argument("-s", "--scale", type=int, default=6)
parser.add_argument("--verbosity", dest="verbosity", type=int)
parser.add_argument("--method", default="auto")
parser.add_argument("--slice", type=str)
parser.add_argument("--ext", type=str, default="png")
args = parser.parse_args()

if args.verbosity >= 3:
	try:
		import os, psutil
		p = psutil.Process(os.getpid())
		t1 = p.create_time()
		sys.stderr.write("%6.2f %s\n" % (time.time()-t1,"startup"))
	except ImportError:
		pass

class dprint:
	def __init__(self, desc):
		self.desc = desc
	def __enter__(self):
		self.t1 = time.time()
	def __exit__(self, type, value, traceback):
		if args.verbosity >= 3:
			sys.stderr.write("%6.2f %s\n" % (time.time()-self.t1,self.desc))

srcs = utils.loadtxt(args.srcs)

ifile = args.ifile
# Allow slicing of input argument
with dprint("read %s" % ifile):
	toks = ifile.split(":")
	ifile, slice = toks[0], ":".join(toks[1:])
	m0 = enmap.read_map(ifile)
	m = eval("m0"+slice)
	if args.slice is not None:
		m = eval("m"+args.slice)
	flip = (m.wcs.wcs.cdelt*m0.wcs.wcs.cdelt)[::-1]<0
	assert m.ndim >= 2, "Image must have at least 2 dimensions"

# Flatten pre-dimensions
mf = m.reshape((-1,)+m.shape[-2:])
ncomp = mf.shape[0]

utils.mkdir(args.odir)

# Split file into sources
for si, src in enumerate(srcs):
	pos  = src[[3,5]]*np.pi/180
	amp  = src[7]
	ipos = np.floor(mf.sky2pix(pos[:,None])[:,0]).astype(int)
	R = args.radius
	sm = mf[:,ipos[0]-R:ipos[0]+R+1,ipos[1]-R:ipos[1]+R+1]
	if sm.size == 0: continue

	# Scale if requested
	if args.scale > 1:
		sm = enmap.upgrade(sm, args.scale)

	with dprint("ranges"):
		# Construct color ranges
		def parse_range(desc,n):
			res = np.array([float(w) for w in desc.split(":")])[:n]
			return np.concatenate([res,np.repeat([res[-1]],n-len(res))])
		crange = np.zeros((2,ncomp))+np.nan
		# Try explicit limits if given
		if args.range is not None:
			crange[1] = parse_range(args.range,ncomp)
			crange[0] = -crange[1]
		if args.min is not None: crange[0] = parse_range(args.min,ncomp)
		if args.max is not None: crange[1] = parse_range(args.max,ncomp)
		# Fall back on quantile otherwise
		if np.any(np.isnan(crange)):
			vals = np.sort(sm[np.isfinite(sm)])
			n    = len(vals)
			v1,v2 = vals[int(round(n*args.quantile))], vals[min(n-1,int(round(n*(1-args.quantile))))]
			crange[0,np.isnan(crange[0])] = v1
			crange[1,np.isnan(crange[1])] = v2
		# Optionally scale by fiducial amplitude
		if args.amprel:
			crange *= amp

	# Construct default out format
	ndigit = int(np.log10(ncomp))+1
	dot  = ifile.rfind(".")
	if dot < 0: dot = len(ifile)

	# Loop over fields
	for i in range(ncomp):
		istr = ("%%0%dd/%%d" % ndigit) % (i+1,ncomp)
		# We want dec to increase upwards (negative pixel diretion)
		# and ra to increae leftwards (negative pixel direction).
		mdata = sm[i]
		box = sm.box()
		if box[1,0] > box[0,0]: mdata = mdata[::-1,:]
		if box[1,1] > box[0,1]: mdata = mdata[:,::-1]
		if flip[0]: mdata = mdata[::-1,:]
		if flip[1]: mdata = mdata[:,::-1]
		with dprint("%s rescale" % istr):
			m_scaled = (mdata-crange[0,i])/(crange[1,i]-crange[0,i])
		with dprint("%s colorize" % istr):
			m_color  = colorize.colorize(m_scaled, desc=args.color, driver=args.method)
		with dprint("%s to image" % istr):
			m_img    = Image.fromarray(m_color).convert('RGBA')
		oname = args.odir + "/src%03d.%s" % (si,args.ext)
		with dprint("%s write to %s" % (istr,oname)):
			m_img.save(oname)
		# Progress report
		if args.verbosity == 2:
			sys.stderr.write("\r%4d %5d/%d" % (si, i+1,ncomp))
	if args.verbosity == 2: sys.stderr.write("\n")
	if args.verbosity == 1: sys.stderr.write("%s\n" % ifile)
